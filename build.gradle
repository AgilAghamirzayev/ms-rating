plugins {
    id 'java'
    id 'org.springframework.boot' version "$springframeworkVersion"
    id 'io.spring.dependency-management' version "$dependencyManagementVersion"
    id 'groovy'
    id 'jacoco'
}

group = 'com.ingress'

java {
    sourceCompatibility = "$javaVersion"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring boot
    implementation(
            'org.springframework.boot:spring-boot-starter-amqp',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-web',
            'org.liquibase:liquibase-core',
            "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocOpenapiVersion"
    )

    // testing
    implementation(
            "io.github.benas:random-beans:$randomBeansVersion",
            "org.apache.groovy:groovy:$grovyVersion"
    )

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.amqp:spring-rabbit-test',
            "org.spockframework:spock-spring:$spockVersion"
    )
}

tasks.named('test') {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/ingress/msrating/annotation/**",
                    "com/ingress/msrating/aspect/**",
                    "com/ingress/msrating/config/**",
                    "com/ingress/msrating/dao/**",
                    "com/ingress/msrating/exception/**",
                    "com/ingress/msrating/model/**"
            ])
        }))
    }
}

jacoco {
    toolVersion = "0.8.6"
}